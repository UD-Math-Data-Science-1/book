# Getting started {.unnumbered} 

We will be using Python extensively. There are choices for two major aspects of using Python:

* How the code runs (the *back end*), and
* How you create and edit code and use the output (the *front end*).

## Back end

Here are some pros and cons of the usual options:

| Your own machine | Cloud  | 
|----------------------|---------------------|
| Available offline üòÑ | Use any device üëç |
| Total control üòé/üòï | No installations üòå | 
| Choose the font end | Browser only   |  
| Yours forever üòÅ  | Permanence is an illusion ‚õÑÔ∏è |
| Your hardware üíµ | You get what you get ¬Ø\\_(„ÉÑ)_/¬Ø |

::: {.callout-tip}
You want to use Python 3.x, not Python 2.x. These coexisted for a while during a dark time for Python. If you see guidance based on Python 2 now, it is either terribly outdated or the product of a disordered mind.
:::

### Run on your own computer

My recommended option is to download [Anaconda](https://www.anaconda.com). It's a big download and a long installation, but it comes with just about everything ready to go. 

### Run on the cloud

There are many choices, but a popular one is [Google Colab](https://colab.research.google.com). It's free and saves you from having to install anything. The hardware is basic but most likely fine for our purposes. You will need to download your results for assignment submissions. 

## Front end

Much of data science is expressed using *notebooks*, which we will use exclusively. Specifically, you will use *Jupyter* notebooks.

::: {.callout-tip}
The name *IPython* refers to the direct ancestor of Jupyter. The older name continues to stick to a few of the tools, though.
:::

A notebook is a self-contained collection of text, math, code, output, and graphics grouped into *cells*. The front end manages the cells and communicates with a back end called the *kernel*.

If you are using Google Colab, then you are using a Jupyter notebook, though within an interface customized by Google. 

### On your own machine

Jupyter splits into "classic" Jupyter and the newer Jupyter Lab. Either is fine for this book, but there is no reason to prefer the older variant. Just start it up from the Anaconda dashboard, and it will open your web browser to the front-end server.

## Setting up VS Code 

If you use the free Visual Studio Code editor, you can take advantage of its [AI assistant](genAI.qmd).

1. First install [Anaconda Python](https://www.anaconda.com). (Be patient! It's a big download and a long installation.)
2. Download and install [Visual Studio Code](https://code.visualstudio.com).
3. Start VS Code and look for the "Extensions" icon on the left. (For me, it looks like 4 building blocks.) Search for "Jupyter" and install the [extension by Microsoft](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter).
4. You may also want to install the [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) by Microsoft.

A notebook file has the extension `.ipynb`. When you open or create such a file, you will see "Choose Kernel" button in the top right. The kernel is the background computing process that produces output for the notebook. If you click that, button, select "Python environments..." and then select the one called "base" or "anaconda3" or something similar. 

::: {.callout-important}
You may have other Python environments installed on your computer. Use the one associated with Anaconda to access the packages we will use in this course.
:::

Once the kernel is selected for a notebook file, that selection will be remembered the next time you open the file.

## Tips on Jupyter success

::: {.callout-warning}
The order of cells that you see in a notebook is not necessarily the order in which they were executed.
:::

*By far* the greatest source of confusion and subtle problems in a notebook is the freedom it gives you to execute the cells in whatever order you want. As you experiment and add and delete cells to try things out, you will reach a point at which the code on the screen is no longer a recipe for reaching the current state of your workspace. 

::: {.callout-tip}
Before submitting a notebook, it's *highly recommended* to restart the kernel and run all cells in order, just to make sure that everything still works as seen on screen.
:::
